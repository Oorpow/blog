import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,a as e}from"./app.50041772.js";const t={},i=e(`<h1 id="_1-\u539F\u59CB\u503C\u8F6C\u539F\u59CB\u503C" tabindex="-1"><a class="header-anchor" href="#_1-\u539F\u59CB\u503C\u8F6C\u539F\u59CB\u503C" aria-hidden="true">#</a> 1. \u539F\u59CB\u503C\u8F6C\u539F\u59CB\u503C</h1><p>\u865A\u503C\u5217\u8868</p><ul><li>&#39;&#39;</li><li>0 || +0 || -0</li><li>undefined</li><li>null</li><li>false</li><li>NaN</li></ul><h2 id="_1-1-number" tabindex="-1"><a class="header-anchor" href="#_1-1-number" aria-hidden="true">#</a> 1.1 Number</h2><ul><li><code>Number(undefined) =&gt; NaN</code></li><li><code>Number(null) =&gt; 0</code></li><li><code>Number(Infinity) =&gt; Infinity</code></li><li><code>Number(NaN) =&gt; NaN</code></li><li><code>Number(&#39;&#39;) =&gt; 0 || Number(&#39; &#39;) =&gt; 0</code></li></ul><h1 id="_2-tostring-valueof" tabindex="-1"><a class="header-anchor" href="#_2-tostring-valueof" aria-hidden="true">#</a> 2. toString &amp; valueOf</h1><ul><li><code>Boolean([] | {} | /d/ | Symbol() | new Error()) =&gt; true</code></li></ul><h2 id="_2-1-number" tabindex="-1"><a class="header-anchor" href="#_2-1-number" aria-hidden="true">#</a> 2.1 Number</h2><blockquote><p>\u6700\u7EC8\u4E3A\u4E86\u8F6C\u5316\u4E3ANumber\uFF0C\u4F18\u5148valueOf</p></blockquote><ul><li>valueOf return \u539F\u59CB\u503C\uFF0C\u76F4\u63A5\u4EA4\u7531\u5BF9\u5E94\u6784\u9020\u51FD\u6570\u5305\u88C5\u5904\u7406</li><li>valueOf return \u5F15\u7528\u503C\uFF0C\u5BFB\u627EtoString\u65B9\u6CD5</li><li>\u82E5toString\u8FD4\u56DE\u539F\u59CB\u503C\uFF0C\u4EA4\u7531\u5BF9\u5E94\u6784\u9020\u51FD\u6570\u5904\u7406</li><li>\u82E5<strong>\u91CD\u5199\u7684toString\u8FD4\u56DE\u5F15\u7528\u503C\uFF0C\u76F4\u63A5\u62A5\u9519</strong></li><li>\u82E5toString\u672A\u7ECF\u91CD\u5199\uFF0C\u5219\u76F4\u63A5Object.prototype.toString.call</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-string" tabindex="-1"><a class="header-anchor" href="#_2-2-string" aria-hidden="true">#</a> 2.2 String</h2><blockquote><p>\u6700\u7EC8\u76EE\u7684\u662F\u4E3A\u4E86\u8F6C\u6362\u4E3Astring\u7C7B\u578B\uFF0C\u56E0\u6B64\u4F18\u5148\u76EE\u6807\u5BF9\u8C61\u7684toString</p></blockquote><ul><li>String([1, 2]) =&gt; &#39;1, 2&#39; || &#39;&#39; + [1, 2] =&gt; &#39;1, 2&#39; <ul><li>Array.prototype.toString()\u4F1A\u5C06\u6570\u7EC4\u62EC\u53F7\u53BB\u9664\uFF0C\u5E76\u53D6\u51FA\u5176\u4E2D\u5143\u7D20</li></ul></li><li>String({}) =&gt; &#39;[object Object]&#39; || &#39;&#39; + {} =&gt; &#39;[object Object]&#39;</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">2</span>
    <span class="token punctuation">}</span>
    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// &#39;2&#39;</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// &#39;1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_3-\u5224\u65AD\u503C\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#_3-\u5224\u65AD\u503C\u7C7B\u578B" aria-hidden="true">#</a> 3. \u5224\u65AD\u503C\u7C7B\u578B</h1><h2 id="_3-1-typeof" tabindex="-1"><a class="header-anchor" href="#_3-1-typeof" aria-hidden="true">#</a> 3.1 typeof</h2><p>\u8FD4\u56DE\u503C\u5217\u8868</p><ul><li>string</li><li>number</li><li>boolean</li><li>function</li><li>object</li><li>symbol</li></ul><p>\u65E5\u671F</p><blockquote><p>\u4ECE\u8868\u9762\u4E0A\u770B\uFF0C\u4E24\u8005\u7684\u8F93\u51FA\u90FD\u662Fstring\u7C7B\u578B\u7684\u65E5\u671F</p></blockquote><ul><li>typeof Date &amp;&amp; typeof new Date === function</li><li>typeof Date() =&gt; string</li><li>typeof new Date() =&gt; object</li></ul><h2 id="_3-2-object-prototype-tostring-call" tabindex="-1"><a class="header-anchor" href="#_3-2-object-prototype-tostring-call" aria-hidden="true">#</a> 3.2 Object.prototype.toString.call</h2><p>\u8FD4\u56DE\u503C\u5217\u8868</p><ul><li><code>[object String | Number | Boolean | Null | Undefined | Function | Object | Symbol | Arguments]</code></li></ul><h2 id="_3-3" tabindex="-1"><a class="header-anchor" href="#_3-3" aria-hidden="true">#</a> 3.3 ==</h2><p>\u7279\u4F8B</p><ul><li><code>undefined == null</code></li><li><code>null == null</code></li><li><code>NaN != NaN</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/*
\u5747\u8C03\u7528Number()\u8FDB\u884C\u8F6C\u6362
1. Number([1, 2]) =&gt; \u8C03\u7528Array.prototype.toString =&gt; [1] =&gt; &#39;1, 2&#39;
2. Number(&#39;1, 2&#39;) =&gt; \u65E0\u6CD5\u8F6C\u6362\u5F97\u51FANaN
3. NaN == NaN =&gt; false
*/</span> 

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token comment">// true</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">NaN</span> <span class="token comment">// false</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// true \u540C\u8C03\u7528Array.prototype.toString\uFF0C![] == false\uFF0C\u56E0\u4E3A[]\u4E0D\u5C5E\u4E8E\u865A\u503C\u5217\u8868\u4E2D\u7684\u4E00\u4F4D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),o=[i];function l(p,c){return s(),a("div",null,o)}var d=n(t,[["render",l],["__file","typeConversion.html.vue"]]);export{d as default};
